data = data.frame(
  성별 = c('M','M','M','M','M','F','F','F','F','F'),
  키 = c(175, 168, 180, 170, 172, 160, 158, 165, 162, 155),
  몸무게 = c(70, 65, 80, 72, 68, NA, 50, 60, 52, 48)
)

# 데이터프레임
# View(data)

결과 = data  # data 에 들어있는 정보를 결과 라는 변수에 대입
# View(결과)

결과$x = c(70, 65, 80, 72, 68, NA, 50, 60, 52, 48)
# View(결과)  # 새로운 컬럼 추가 
# View(data)

# 전처리 도구(아래 디플리알)
# install.packages("dplyr")  # 설치는 한번만하고 주석처리
library(dplyr)   # 설치된 도구를 불러옵니다.
# mutate 새로운열 추가  = 결과$x(필터 필요없을때사용)와 위의 동일
# 필터링된 결과를 새로운 열로 추가할 때는 디플리아을 사용하자.
# data = data %>% mutate(x = 10)   # 위에 선언된 DATA에 X로 된곳에 10이 전부추가
# View(data)

결과 = data %>% mutate(x = 10)
# View(결과)
# View(data)

# 상관계수   # 상관계수  # 상관계수
# 상관계수는 두 변수가 서로 어떻게 관련되어 있는지를 측정하며, 수치로 표현
data = data.frame(
  성별 = c('M','M','M','M','M','F','F','F','F','F'),
  키 = c(175, 168, 180, 170, 172, 160, 158, 165, 162, 155),
  몸무게 = c(70, 65, 80, 72, 68, 55, 50, 60, 52, 48)
)

# cor은 correlation의 약자로 상관계수 뜻
상관계수 = cor(data$키, data$몸무게)
print(상관계수)  # 결과가 NA가 나옴.....?????? 왜???
# NA : 결측값, 데이터 수집에 누락된 값(혹은 실패한 값)
#결측값 처리
# obs = observation # na 를 제외한 값들 계산
상관계수= cor(data$키, data$몸무게, use = 'complete.obs')
print(상관계수)   # 0.9685347 이나옴.

# 상관계수는 보통 -1에서 1까지의 값을 가지고 있다.
# 상관계수의 값이 1에 가까울수록 두변수가 완벽하게 양의 선형관계를 가짐
# 즉, 한변수가 증가할 때 다른변수도 증가함.
# 두변수가 -1에 가까울수록 두변수가 완벽하게 음의 선형관계를 가짐.
# 즉, 한변수가 증가할 때 다른 변수는 감소함.
# 만약에 0이 나오면 두변수간 선형관계가 전혀 없음(관계가 없다.)

# 디플리알을 이용해서 성별 키와 몸무게 상관계수를 조회!!!!!!!

성별_상관계수 = data %>% group_by(성별) %>% summarise(
  cor(키, 몸무게, use = 'complete.obs')
)
print(성별_상관계수)   

# 위의 것을 산점도로 시각화

# main 은 그래프이름
plot(data$키, data$몸무게, main = '산점도와 회귀선', xlab = 'x축',
     ylab = 'y축', col = 'blue', pch = 19)

# 위의 상태에서 회귀선 추가

# lm = linear model 선형모델 = 머신러닝에서 많이사용
model = lm(data$몸무게~ data$키)

# add a line 선을 추가하다.  lwd = 선을 두껎게 하는것임.
abline(model, col = 'red', lwd = 3)



==============================================================

# 정규분포
# 정규분포는 확률밀도 그래프의 한 종류로, 키, 점수처럼 연속적인 값의 
# 분포를 정규분포라고 함. 
# 정규분포의 반대는 이항분포(동전 앞 / 뒤 :  결과가 2개밖에 없는 것임.)
# 논문이나 레포트 할 때 많이 사용한다.

students = data.frame(
  name = c("Alice", "Bob", "Charlie", "David", "Eve", "Jose"),
  score = c(85, 92, 78, 95, 88, 200)
)

# 1번 평균하고 표준편차를 조회한다.
#평균
mu = mean(students$score)
# 표준편차
sigma = sd(students$score)

# 2번째 정규분포 곡선용 x, y 값 생성
# 최소 최대값(아래)
# length : 곡선을 부드럾게 그려주는 옵션
x = seq(min(students$score), max(students$score), length = 50)

# dnorm : destiny 와 normal drstribution(정규분포) 결합
# 주어진 평균과 표준편차를 갖는 정규분포에서 특정 x에 대한 확률밀도를 계산
# 즉, 데이터가 특정구간에 있을 확률을 말함.
y = dnorm(x, mu, sigma)

# 정규분포 시각화
# type = 'l'은 라인을 말한다. line
# plot(x, y, type = 'l', lwd = 2, col = 'blue', main = '학생 점수 정규분포'
#     , xlab = '점수', ylab = '확률')

# 조제 200점 때문에 정규분포 그래프가 이상하게 나옴.
# 실무에서는 그래프가 이상한 것을 확인이 되면, 이상치 제거를 해야함.
# 이상치 제거가 중요하고, 이것도 데이터 전처리 과정의 하나이다.
# 데이터의 분포에서 극단적으로 벗어난 값을 탐지하고, 처리하는 방법
# 그래서, 조제의 데이터를 제거해야 한다.
============================================
# Z-score 라는 알고리즘(이상치제거)을 사용하여 제거함.
# z스코어가 0이면 데이터 값이 평균과 동일함을 의미함.
# 만약, Z스코어가 양수이면, 데이터 값이 평균보다 크며, 양수 값이 클수록 
# 평균에서 멀리 떨어져 있음을 의미함을 이해해야함. 중요함.....!!!!


print(students)

# 1번 작업 : 평균과 표준편차를 먼저 구해야 한다.

# mean : 평균
mu = mean(students$score)
# sd : 표준편차
sigma = sd(students$score)

print(mu)   # 106.3333
print(sigma)  # 46.26302

# students$z_score =(students$score - mu) / sigma
# abs 절대값
students$z_score = abs((students$score - mu) / sigma)
print(students)

# 2 ~ 3(임계값) 조제의 값이 2.0246554가 나왔음. 양수값이 나옴.
# 따라서, 임계값을 상황에 따라 조절해야 하는 것임.

library(dplyr)

이상치제거_데이터 = students %>% filter(z_score < 2)  
# 2는 임계값으로 상황에따라 조절
print(이상치제거_데이터)    # 아래 콘솔창에서 조제가 사라졌음.


# 위의 이상치 제거 후 정규분포 그래프 시각화
mu = mean(이상치제거_데이터$score)
sigma = sd(이상치제거_데이터$score)
# x = seq(min(students$score), max(students$score), length = 50)

x = seq(min(이상치제거_데이터$score) - 10, max(이상치제거_데이터$score) + 10, length = 50)
y = dnorm(x, mu, sigma)

# x = seq(min(이상치제거_데이터s$score)-10, max(이상치제거_데이터$score)+10, length = 50)
# y = dnorm(x, mu, sigma)
# -10 / +10을 넣어 그래프를 이쁘게 만든다.

plot(x, y, type = 'l', lwd = 2, col = 'blue', main = '학생 점수 정규분포'
     , xlab = '점수', ylab = '확률')

# 중앙값, 상위 20%, 하위 20% 추가

med = median(이상치제거_데이터$score)
print(quantile(이상치제거_데이터$score))    # 사분위수 출력

q20 = quantile(이상치제거_데이터$score, 0.2)  # 하위 20
q80 = quantile(이상치제거_데이터$score, 0.8)  # 상위 20

# abline
# V는 수직선이다. lty는 점선이다.
abline(v=med, col = 'purple', lwd=2, lty=2)
abline(v=q20, col = 'orange', lwd=2, lty=2)
abline(v=q20, col = 'red', lwd=2, lty=2)

=====================================(위의 공식에 이어서 하는 것임.)====
# 신뢰구간 추가하기
# 신뢰구간은 진짜 답이 있을 것 같은 범위를 말한다. 데이터 전체를 분석하지않고,
# 신뢰할 수 있는 데이터 범위를 분석함.


# 데이터 행의 수 조회
n = nrow(이상치제거_데이터)
print(n)   # 전체 행의 수 5

# 표준오차 : 내가 구한 평균값이 얼마나 믿을 만한지를 알려주는 숫자
# 표준오차가 작다 : 내가 구한 평균이 진짜 평균에 가까울 확률이 높다.
# 표준오차가 크다 : 내가 구한 평균이 진짜 평균과 많이 다를수 있다.
# 표준오차
# sqrt : 제곱근 
# 예를들어 sqrt(4) --> 2, sqrt(9) --> 3이 나옴
se = sigma / sqrt(n)
# 1.96? 통계분석에서 일반적으로 사용되는 신뢰수준 값 --> 95% 신뢰
ci_low = mu - 1.96*se
ci_high = mu + 1.96*se

# 신뢰구간 그래프 표현
abline(v=ci_low, col = 'black', lwd = 2)
abline(v=ci_high, col = 'black', lwd = 2)


===========(센서 온도 예제 실습 자료 : 아래의 내용임 / 오전까지 자료임.)=========

library(dplyr)

# csv 파일 불러오기 

센서_데이터 = read.csv('sensor_data.csv', fileEncoding = 'CP949',
                  encoding = 'UTF-8', check.names = FALSE)

#View(센서_데이터)
str(센서_데이터) #데이터 타입확인 숫자인지 문자인지 확인!

# 1. 이상치 제거
# 평균, 표준편차 조회
mu = mean(센서_데이터$온도)
sigma = sd(센서_데이터$온도)
# Z-score 이상치 제거 기법
센서_데이터$z_score = abs((센서_데이터$온도 - mu) / sigma)
print(센서_데이터)

# 필터링 제거
# 임계값 3
# 임계값 2는 비교적 넓은 범위의 이상치를 탐지할 때 사용됩니다.
센서_데이터 = 센서_데이터 %>% filter(z_score < 3)

# 정규분포 시각화
# x,y 축 그리기
온도_최솟값 = min(센서_데이터$온도) 
온도_최댓값 = max(센서_데이터$온도)
x = seq(온도_최솟값 - 10, 온도_최댓값 + 10, length = 50)
y = dnorm(x, mu, sigma) #x값, 평균, 표준편차 (순서 주의!)

# PDF 저장하기
pdf('sensor_data.pdf', family ='Korea1deb') #PDF 선언

# 정규분포 그리기
plot(x, y, type='l',main = '온도센서 정규분포도', xlab='온도', ylab='확률')

# 중앙값, 하위 20%, 상위 20% 조회
med = median(센서_데이터$온도) #중앙값 조회
q20 = quantile(센서_데이터$온도, 0.2) #하위 20
q80 = quantile(센서_데이터$온도, 0.8) #상위 20

# 선표시
abline(v=med, col='purple') #중앙값은 보라
abline(v=q20, col='forestgreen') #초록 하위
abline(v=q80, col='orange') # 주황 상위

# 신뢰구간 표시
n = nrow(센서_데이터) #데이터 행의 수 조회
se = sigma / sqrt(n) #표준편차 조회
# 신뢰구간(confidence interval) 계산
ci_low = mu - 1.96 * se
ci_high = mu + 1.96 * se
# 신뢰구간 표기
abline(v=ci_low, col = 'red')
abline(v=ci_high, col = 'red')

dev.off()# PDF 닫기  # 그림 확인 센서데이터

================================================================

-----------(오후에 6월 1일 연습문제 풀이 코드)-----------실습자료

library(dplyr)  # 로드
# 한국어 파일의 경우, CP949 또는 EUC-KR 인코딩을 사용하는 것이 일반적
data = read.csv('서울특별시_공공자전거_이용정보.csv',
                na.strings = c(""), # ""를 NA로 표현한다.
                fileEncoding = 'CP949', 
                encoding = 'UTF-8', 
                check.names = FALSE)
#View(data)
str(data)
# 문제 1: 이동거리(M)가 2000 이상인 데이터 중 해당 대여소명과 이동거리(M), 이용시간(분)만 조회.
문제1 = data %>% filter(`이동거리(M)` >= 2000) %>% select(대여소명, `이동거리(M)`, `이용시간(분)`)
#View(문제1)

# 문제 2: 대여소 별 이용건 수 조회.
# na.rm = TRUE : 결측값(누락된 데이터) 제외
# summarise 요약
문제2 = data %>% group_by(대여소명) %>% summarise(이용건수_합계 = sum(이용건수, na.rm= TRUE))
#View(문제2)

# 문제 3: 일일회원과 정기회원 이용 건 수, 평균 이용시간 조회. 단, 일일회원권 중 비회원은 제외
회원타입 = data %>% group_by(대여구분코드) %>% summarise(CNT = sum(이용건수))
# print(회원타입)
문제3 = data %>% filter(대여구분코드 != '일일권(비회원)') %>% 
  group_by(대여구분코드) %>% summarise(총이용건수 = sum(이용건수, na.rm = TRUE),
                                 평균이용시간 = mean(`이용시간(분)`, na.rm = TRUE)
                                 )
----------------결과값-------------------
대여구분코드     CNT
  <chr>          <int>
1 일일권          1031
2 일일권(비회원)    45
3 정기권          3176
==========================================
# 문제 4: 탄소량이 0.8 이상인 이용 건수는 몇 건인지 조회.
# n(): 행 수
문제4 = data %>% filter(탄소량 >= 0.8) %>% summarise(CNT = n())

대여구분코드 총이용건수 평균이용시간

  <chr>             <int>        <dbl>
1 일일권             1031         23.8
2 정기권             3176         15.1

# 문제 6: 연령대별로 이용건수의 합과 평균 운동량을 구한 뒤, 운동량 평균이 가장 높은 연령대 조회.
# arrange : 정렬, slice : 자르다
문제6 = data %>% group_by(연령대코드) %>% summarise(
  이용건수 = sum(이용건수, na.rm = TRUE), 
  평균운동량 = mean(운동량, na.rm = TRUE)
  ) %>% arrange(desc(평균운동량)) %>% slice(1)
print(문제6)
# 문제7. 대여소명에 "역"이 포함된 대여소에서 발생한 총 운동량의 합 조회.

text = c('apple', 'banana', 'grape', 'bread')
# 'ap'가 들어간 단어찾기
# grep(잡다) logical(TRUE, FALSE)
print(grepl('ap',text))
문제7 = data %>% filter(grepl('역',대여소명)) %>% summarise(총운동량 = sum(운동량, na.rm = TRUE))
print(문제7)
#문제 9: 운동량을 데이터 스케일링 min-max로 변환한 scaled_운동량 컬럼을 추가 0.8 이하인 회원 이동거리 사분위수 출력
# min-max : 데이터의 범위를 0과 1사이로 변환하는 데이터 전처리 기법
# 예) 간수치 30 
# 공식 : (기존값 - 최솟값) / (최댓값 - 최솟값)
운동량_min = min(data$운동량)
운동량_max = max(data$운동량)

min_max_결과 = (data$운동량 - 운동량_min) / (운동량_max - 운동량_min)
print(min_max_결과)# 0 ~ 1사의 숫자로 변환

data$scaled_운동량 = min_max_결과 #새로운 컬럼에 min-max값 대입
# 0.8 이하인 회원 이동거리 
운동량_0.8_이하_회원 = data %>% filter(scaled_운동량 <= 0.8)
# 사분위수 출력
print(quantile(운동량_0.8_이하_회원$`이동거리(M)`))
# 0%(최솟값)   25%(하위 25%)   0%(중앙값)      75%(상위 25%)     100%(최댓값)

#문제 10. 나이대 별 운동량과 이동거리의 상관관계 조회.
# cor = correlation 
# use = 'complete.obs' : 결측값 제외
문제10 = data %>% group_by(연령대코드) %>% summarise(
  상관계수 = cor(운동량, `이동거리(M)`, use = 'complete.obs')
  )
print(문제10)

===============9번 사분위수 10번 결과값=========  
[ reached 'max' / getOption("max.print") -- omitted 3079 entries ]
      0%      25%      50%      75%     100% 
    0.00   930.00  1547.20  2635.76 33674.00 
# A tibble: 7 × 2
  연령대코드 상관계수
  <chr>         <dbl>
1 10대          0.903
2 20대          0.980
3 30대          0.974
4 40대          0.978
5 50대          0.984
6 60대          0.990
7 70대          0.965
==========================================
=========================오후에 문제풀이====================

*****오후에 그래프 그리기 산점도, 회귀선 등등*******
library(dplyr)  # 디플리알(%>%)을 사용하려면 디플리알 넣기
# 한국어 파일의 경우, CP949 또는 EUC-KR 인코딩을 사용하는 것이 일반적
data = read.csv('서울특별시_공공자전거_이용정보.csv',
                na.strings = c(""), # ""를 NA로 표현한다.
                fileEncoding = 'CP949', 
                encoding = 'UTF-8', 
                check.names = FALSE)

# 문제1: 성별 운동량 박스플롯 표현, 단, 이용시간(분) 3분이하는 제외
성별_데이터확인 = data %>% group_by(성별) %>% summarise(CNT = n())
print(성별_데이터확인)

문제1 = data %>% filter(`이용시간(분)` > 3 & !is.na(성별))

# 박스플롯
boxplot(운동량 ~ 성별, data = 문제1, main = '성별 운동량 박스플롯',
        xlab = '성별',
        ylab = '운동량',
        col = c('grey','pink','skyblue'))  

# 막대그래프 그리기    # 문제3번은 생략하고 카톡에 메세지로 봐라
# 문제2 : 연령대별 평균 이동거리(M)를 막대그래프로 표현.
문제2 = data %>% group_by(연령대코드) %>% summarise(평균이동거리 = mean(`이동거리(M)`, 
                  na.rm = TRUE))
# 막대그래프
barplot(문제2$평균이동거리,    # 데이터
        names.arg = 문제2$연령대코드,   # x축데이터
        main = '연령대 별 평균 이동거리',
        xlab = '연령대',
        ylab = '평균이동거리')

#정기권을 구매한 이용자 중 연령대별 평균운동량 파이차트로 표현,
# 단 이용시간(분) 5분 이하는 평균에서 제외함.

문제4 = data %>% filter(대여구분코드 == '정기권' & `이용시간(분)`>5) %>%
 group_by(연령대코드) %>% summarise(평균운동량 = mean(운동량, na.rm = TRUE))

# 도넛

pie(문제4$평균운동량, main='연령대별 평균 운동량', col=rainbow(7),
    label = 문제4$연령대코드)

# 도넛효과
symbols(0, 0, circles = 0.5, inches = FALSE, add = TRUE, bg = 'white')


# 문제5:정기권 회원 중 연령대가 10대에서 50대사이의 이용시간과 운동량을
#비교하는 산점도 그래프를 표현하시오(이용시간 X, 운동량Y축) 회귀선추가하기.

문제5 = data %>% filter(대여구분코드 == '정기권' & 연령대코드 %in% 
                      c('10대','20대','30대','40대','50대'))
# 산점도
plot(문제5$`이용시간(분)`, 문제5$운동량, main = '이용시간과 운동량 관계',
     xlab = '이용시간(분)', ylab ='운동량')

# 회귀선
model = lm(운동량 ~ `이용시간(분)`, 문제5)
abline(model, col = 'red', lwd = 2)


=================================================================
6월 8일 16시경 문제풀이 최종(건강보험공단 관련 사항)

library(dplyr)  # 로드
# 한국어 파일의 경우, CP949 또는 EUC-KR 인코딩을 사용하는 것이 일반적
data = read.csv('국민건강보험공단_건강검진정보.csv',
                na.strings = c(""), # ""를 NA로 표현한다.
                fileEncoding = 'CP949', 
                encoding = 'UTF-8', 
                check.names = FALSE)
# View(data)

# 건강검진 최종 10 문제
# 문제 1. : 남성의 허리둘레 사분위수 조회.
# 문제 2. : 성별 허리둘레와 체중 상관관계 조회.
# 문제 3. : 혈색소 수치는 남성은 13~17, 여성은 12~16이 정상입니다.
# 정상과 의심을 구별할 수 있는 컬럼 혈색소결과를 만드시오.
# 문제 4. : 식전혈당이 126이상은 위험, 100미만은 정상 그외는 주의를 나타내는 컬럼 당뇨병위험을 추가하시오.
            #추가 후 당뇨병위험 별 인원 수 조회.
# 문제 5. : 연령대 코드가 5~8인 사람 중 혈색소의 중앙값, 하위 30%, 상위 10%, 표준편차 조회.
# 문제 6. : 음주와 흡연을하는 남성의 혈색소 이상치를 제거한 데이터 수 조회. 임계치는 2로 필터링
# 문제 7. : 연령대 코드별로 허리둘레의 분포를 박스플롯으로 나타내세요.
# 문제 8. : 연령대 코드가 5~8인 사람의 신장과 체중의 관계를 산점도로 나타내시오.
             #회귀선도 추가하시오.
# 문제 9. : 감마지티피의 분포를 정규분포그래프으로 나타내세요.
# 중앙값, 하위 20%, 상위 20%, 신뢰구간도 표현해주세요.
# 문제 10. : 혈청지오티와 혈청지피티의 관계를 산점도로 나타내시오.
  # 단, 혈청지오티와 혈청지피티를 min-max로 스케일링 후 비교하시오. 
  # 회귀선도 추가하시오.





                      













