#1-1. 수집한 데이터를 불러오기 : 날씨데이터 --> 파일 이름만 변경해줌.
weather = read.csv('경기도서울.csv', #csv파일이름
                   na.strings = c(""),
                   fileEncoding = 'CP949', #한글깨짐 방지
                   encoding = 'UTF-8', #한글깨짐 방지
                   check.names = FALSE)

#2. 데이터 구조와 변수 확인
# int : 정수, num : 실수, chr : 문자
str(weather)            #각 컬럼(벡터)들 데이터 타입 꼭 확인

# head로 상위 데이터 확인
print(head(weather))        #상위 6개 행 데이터 확인(head = 기본이 6개 나옴)
print(nrow(weather))         #수집한 데이터 전체 개수
print(summary(weather))      #전체 컬럼 요약(사분위수, 평균)
print(table(weather$지점명))          #각 지점명 개수 확인 각 4104개

# 컬럼이 한글입니다. 
# 컬럼명을 한글에서 영어로 변경
# col + names

colnames(weather) = c('station_id', 'station_name', 'datetime', 'temp', 'precip',
                       'windspeed', 'winddir', 'humidity', 'CA')
print(head(weather))   #컬럼 영어로 변경되었는지 확인

# 일시(datatime) 문자에서 date형태로 형 변환
# as.Date (연,월,일) -> 시간 정보를 무시
# as.POSIXct(포직스) -> 날짜와 시간을 모두 형 변환

weather$datetime = as.POSIXct(weather$datetime, format ='%Y-%m-%d %H:%M')
str(weather)    #형변환 컬럼 확인

# 누락된 데이터(결측치 Missing Value) 처리
# is.na() 결측값이니?
# col + Sums(총합)

print(colSums(is.na(weather))) # 전체 컬럼 NA 개수 통계

# 결측값을 0으로 대체하거나 해당 컬럼의 평균으로 대체
# 결측값 0으로 대체

weather$precip[is.na(weather$precip)] = 0

weather$precip = ifelse(is.na(weather$precip),0,weather$precip)
        print(colSums(is.na(weather)))
        
# 누락된 컬럼이 있는지 확인?
# 체감온도는 없네? 만들어 보자
weather$feels_like = weather$temp - ((100-weather$humidity) / 5)
print(head(weather))        
                        
#3. 기초통계량 확인 및 시각적 탐색(EDA)
#3-1 분석할 컬럼 통계량 산출(summary) : 온도, 습도, 강수량, 풍속
print(summary(weather$temp))   # 온도
print(summary(weather$humidity))   # 습도
print(summary(weather$precip))      # 강수량
print(summary(weather$windspeed))    # 풍속

# 온도 표준편차 구하기
# na.rm = TRUE : 결측값 제외하고 표준편차 구하기
# 표준편차가 작다는 것은 데이터가 평균 주변에 잘 모여있음.
# 표준편차가 크다는 것은 이상치가 있다. 이상치 제거를 해야한다는 것 알아야함.


temp_sd = sd(weather$temp, na.rm = TRUE)
print(temp_sd)     # 10.33787   결측값제외하고 표준편차 구하기

print(round(temp_sd, 2))    # 10.34  소수점 2자리까지만 나오게 하기

# 변동계수
temp_avg = mean(weather$temp, na.rm = TRUE)
CV = (temp_sd / temp_avg) * 100
cat('온도 변동 계수 : ', CV, '\n')    # 온도 변동계수 : 122.8989
# 위의 값이 50이상(122.8989)이므로 이상치 제거 해야겠다.
# 보통 cv가 10~20이하면 고르게 분포
# 50이상이면, 데이터가 평균에 비해 상당히 넓게 분포되어 있다.

# 각 컬럼들이 어떤관계가 있는가? 상관계수 구하기
# 상관계수 행렬
# 상관계수 값은 -1 ~ 1 사이로, 0에 가까울수록 상관관계가 약함을 의미.
# mat(행렬)을 의미함.
# $ : 컬럼접근, [] : 데이터 접근


cor_mat = cor(weather[,c('temp', 'precip', 'windspeed', 'humidity')], use = 'complete.obs')

print(cor_mat)


# 그래프로 해당 상관관계 표현
# 시각적 탐색(EDA)
# 단일변수 시각화
# 두 변수간의 관계도 시각화
library(corrgram)  # 상관관계 그래프  색이 진할수록 강하고, 연할 수록 약함.
corrgram(cor_mat, main = '온도,강수량,풍속,습도 상관계수', 
         lower.panel = panel.shade,
         upper.panel = panel.cor)
                      
# 기본 plot으로 시각화하기
# ggplot2는 복잡한 시각화에 적합

# 히스토그램(단일변수 시각화)

# par(mfrow = c(1,3))
hist(weather$temp, main = '온도데이터 분포', xlab='온도(c)')

# 습도 히스토그램
hist(weather$precip, main = '습도데이터 분포', xlab='습도(p)')

# 박스플롯
boxplot(weather$temp, main = '온도 박스플롯', ylab='온도(c)')

# 두 변수간의 관계를 시각적으로 표현
#1. 시간별 기온변화

# par(mfrow = c(2,3))  # 1행 1열로 다시 나오게 복구
plot(weather$datetime, weather$temp, type='l',
     main = '시간에 따른 온도변화', xlab='시간', ylab='온도')

#2. 기온과 습도의 관계
plot(weather$temp, weather$humidity, main = '기온 vs 습도',
     xlab='온도', ylab='습도')
# 선형회귀 모델 생성
model = lm(weather$humidity ~ weather$temp)  # 선형회귀 모델 생성
# abline 
abline(model, col = 'red', lwd=2)

#3.풍속과 기온관계를 산점도로 표현
plot(weather$windspeed, weather$temp, main = '풍속 vs 기온',
     xlab='풍속', ylab='기온')   
   
model = lm(weather$windspeed ~ weather$temp)
abline(model, col = 'red', lwd=2)

# par(mfrow = c(2,3)) 

#4. 데이터 전처리
# 이상치 제거
# 디플리알
library(dplyr)  # 디플리알 불러오기

# 기온 이상치 판단

#1. 이상치 판단 방법 : z-score, IQR
# z-score(평균, 표준편차, 성적 등) : 키, 몸무게 등 정규분포에 많이 사용
# IQR(사분위수) : 근로소득, 강수량, 기온 등을 비대칭데이터를 분석할때 사용

# IQR을 이용해서 이상치 판단(6월 22일 배운것임. 처음 배움)
# 데이터를 크기순서대로 줄 세웠을때, 가운데 50%가 얼마나 퍼져 있는지 알려줌.

Q1 = quantile(weather$temp, 0.25, na.rm = TRUE)
Q3 = quantile(weather$temp, 0.75, na.rm = TRUE)

IQR = Q3- Q1 
# 1.5의 의미는 통계학자 존 튜키가 제안한 것으로 너무 좁지도, 넓지도 않은 적절한
# 범위를 설정하기 위해 표준으로 사용하고 있다.
lower_bound = Q1 - 1.5 * IQR
upper_bound = Q3 + 1.5 * IQR

weather = weather %>%
  mutate(temp = ifelse(temp < lower_bound | temp > upper_bound, NA, temp))

# 이상체 데이터 개수 확인
# 기온데이터가 NA라는것은 이상치라는뜻

# sum : 총합

print(sum(is.na(weather$temp)))  # 이상치 데이터가 16 이나왔음.

cat('이상치 데이터 개수 : ', sum(is.na(weather$temp)), '\n')

# date라는 컬럼만들기

weather_daily = weather %>% mutate(date = as.Date(datetime)) %>%
  group_by(date) %>% summarise(temp_avg = mean(temp, na.rm = TRUE))

print(head(weather_daily))   # 필터링 결과 확인


#5.실용적 분석
# 시간마다 기록된 숫자 --> 시계열 데이터
# 시계열 분석은 이 숫자들이 어떻게 바뀌는지 어떤 규칙이 있는지 알아볼수있음.
# 1개월의 데이터를 가지고 예측을 한번 해보는 것임.(아래)
# 시계열 데이터(time series), 
# frequency = 30 : 일별 평균 기온데이터를 한달 주기의 시계열 데이터로 반환
temp_ts = ts(weather_daily$temp_avg, frequency = 30)
print(temp_ts)

# install.packages('forecast') 

library(forecast)  # 시계열 데이터를 바탕으로 미래를 예측하는 통계 모델(매우중요)

auto_model = auto.arima(temp_ts)  # 시계열 데이터를 가지고 미래예측

# forecast : 미래 패턴을 예측하고 신뢰구간까지 산출함.

forecasted = forecast(auto_model, h = 30)

# 예측결과 데이터프레임 생성

predict_data = data.frame(
  time = as.numeric(time(forecasted$mean)),
  forecast = as.numeric(forecasted$mean),
  lower = as.numeric(forecasted$lower[,2]),  # 95% 신뢰구간 하한
  upper = as.numeric(forecasted$upper[,2])   # 95% 신뢰구간 상한
)
print(predict_data)

# 실제 값 데이터 프레임 생성
actual_data = data.frame(
  time = as.numeric(time(temp_ts)),
  temp = as.numeric(temp_ts)
)

library(ggplot2)

line_plot = ggplot() +
  
  # 실제값 선그래프
  
  geom_line(data = actual_data, aes(x = time, y = temp), color = "steelblue", size = 1) +
  
  # 예측 신뢰구간 리본
  
  geom_ribbon(data = predict_data, aes(x = time, ymin = lower, ymax = upper), fill = "orange", alpha = 0.3) +
  
  # 예측값 선그래프
  
  geom_line(data = predict_data, aes(x = time, y = forecast), color = "red", size = 1.2, linetype = "dashed") +
  labs(
    title = "Temperature Forecast",
    x = "Time",
    y = "Temperature"
  ) +
  theme_minimal()

print(line_plot)

================================
새로운 R-script 생성하여 실시(아래부터)

weather = read.csv('경기도서울.csv',           #csv파일이름
                   na.strings = c(""),
                   fileEncoding = 'CP949',          #한글깨짐 방지
                   encoding = 'UTF-8',      #한글깨짐 방지
                   check.names = FALSE)

colnames(weather) = c('station_id', 'station_name', 'datatime', 'temp', 'precip','windspeed', 'winddir', 'humidity', 'CA')

str(weather)

library(dplyr)

weather_daily = weather %>% mutate(date = as.Date(datatime)) %>%
  group_by(date) %>% summarise(temp_avg = mean(temp, na.rm =TRUE))


print(head(weather_daily)) 

# 시계열 타입으로 변환하기 (매우중요함)
# 변환하는 이유는 예측모델 대부분이 시계열 타입으로 받기때문이다.
# frequency = 30, 한달에 30일 있다고 가정(지금은 데이터가 30일치만 있다.)
#만약, 1년치면 365
temp_ts = ts(weather_daily$temp_avg, frequency = 30)  # 시계열 타입
print(head(temp_ts))   # 타입만 바뀌고 print(head(weather_daily)) 값이 같게나옴.

str(temp_ts)


library(forecast)

# arima, 시계열 데이터를 분석하고, 미래 값을 예측하는데 사용되는 통계 모델임.
auto_model = auto.arima(temp_ts)

# 향후 30일 예측해보기, 위의 h = 30일

forecasted = forecast(auto_model, h = 30)  #  주별로 했으면 30주란 의미임.

print(forecasted)  # 타임 시리즈 : 인덱스번호,신뢰구간과 예측한 온도 데이터

# 예측데이터와, 실제 데이터를 데이트프레임으로 만들어서 시각화

predict_data = data.frame(
  time = as.numeric(time(forecasted$mean)),
  forecast = as.numeric(forecasted$mean),
  lower = as.numeric(forecasted$lower[,2]),  # 95% 신뢰구간 하한
  upper = as.numeric(forecasted$upper[,2])   # 95% 신뢰구간 상한
)
print(predict_data)

actual_data = data.frame(
  time = as.numeric(time(temp_ts)),
  temp = as.numeric(temp_ts)
)

library(ggplot2)

line_plot = ggplot() +
  # 실제값 선그래프
  geom_line(data = actual_data, aes(x = time, y = temp), color = "steelblue", size = 1) +
  # 예측 신뢰구간 리본
  geom_ribbon(data = predict_data, aes(x = time, ymin = lower, ymax = upper), fill = "orange", alpha = 0.3) +
  # 예측값 선그래프
  geom_line(data = predict_data, aes(x = time, y = forecast), color = "red", size = 1.2, linetype = "dashed") +
  labs(
    title = "Temperature Forecast",
    x = "Time",
    y = "Temperature"
  ) +
  theme_minimal()

print(line_plot)


# 예측값과 실제값의 차이가 얼마나 날까?
# 신뢰가 가능한가?

#MAE(모델 성능평가)

actual = weather_daily$temp_avg
actual_length = length(actual)  # 데이터 길이
cat('actual_leanth: ', actual_length, '\n')   # length = 172


predicted = as.numeric(forecasted$mean)
predicted_length = length(predicted)
cat('predicted_length: ', predicted_length, '\n')  
# actual_leanth:  172 / predicted_length:  30 

#MAE(모델 성능평가) : 예측이 얼마나 잘 맞았는지 쉽게 알려주는 함수
# 예를들어, 내일 기온이 25도 일꺼야 예측을 했는데 실제 27도
# 오차 2도, 이런 오차들을 모두 더해서 평균을 내면 MAE가 됩니다.

MAE = mean(abs(actual[1:predicted_length] - predicted))

cat('MAE : ', MAE, '\n')   # MAE :  24.91617 

# 예측값과 실제값의 차이가 평균적으로 24도라는 뜻
# 결과값 actual_leanth:  172 predicted_length:  30 MAE :  24.91617 

